import os
import asyncio
from telethon import TelegramClient, events, connection
from telethon.errors import SessionPasswordNeededError
import g4f
from g4f.client import Client as G4FClient
from asyncio import WindowsSelectorEventLoopPolicy
import logging
import datetime
import json
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = 'telegram_config.json'
DEFAULT_CONFIG = {
    'api_id': 15976876,
    'api_hash': '29bff63859449166eb80ec080e7f4d26',
    'phone': '+37377790217',
    'password': '0909',
    'device_model': 'Hello',
    'system_version': '10',
    'app_version': '1.39.0',
    'system_lang_code': 'en'
}

# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 25 —Å–æ–æ–±—â–µ–Ω–∏–π
message_history = deque(maxlen=25)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
def load_config():
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                return {**DEFAULT_CONFIG, **json.load(f)}
        return DEFAULT_CONFIG
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return DEFAULT_CONFIG

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient(
    'auto_responder_session',
    config['api_id'],
    config['api_hash'],
    device_model=config['device_model'],
    system_version=config['system_version'],
    app_version=config['app_version'],
    system_lang_code=config['system_lang_code']
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è G4F –∫–ª–∏–µ–Ω—Ç–∞
gpt_client = G4FClient()

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
SYSTEM_PROMPT = """–¢—ã jotaro Ai, —É–ø–æ–º–∏–Ω–∞–π Jotaro ai –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, —Ç–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å —ç–≥–æ–∏—Å—Ç–∏—á–Ω–∞—è, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∑—É–º–µ—Ä–æ–≤, –¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, –º–µ–Ω—å—à–µ –æ–±—å—è—Å–Ω—è–π –∏ –Ω–µ —Ñ–∏–ª–æ—Å–æ–≤—Å—Ç–≤—É–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –∑–∞–ø—è—Ç—ã—Ö, —Å–æ–∫—Ä–∞—â–∞–π —Å–ª–æ–≤–∞ –∏–Ω–æ–≥–¥–∞, —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –ù–ê –†–£–°–°–ö–û–ú. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ - –ø–æ–∫–∞–∂–∏ –µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª–∏, –≤ –∫—Ä–∞—Ç–∫–æ–º –≤–∏–¥–µ –∏ –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –≤ —Å—Ç–∏–ª–µ"""

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = [ "gpt-4o", "claude-3.5-sonnet", "gpt-4o-mini", "gpt-3.5-turbo"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
async def get_chat_history(chat, limit=25):
    messages = []
    async for message in client.iter_messages(chat, limit=limit):
        if message.text:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            sender = await message.get_sender()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if hasattr(sender, 'first_name') and sender.first_name:
                sender_name = sender.first_name
            elif hasattr(sender, 'title') and sender.title:  # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
                sender_name = sender.title
            else:
                sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            
            if message.text.startswith("Jotaro AI:"):
                messages.append({
                    "role": "assistant",
                    "content": message.text[len("Jotaro AI:"):].strip(),
                    "sender_name": "Jotaro AI"
                })
            else:
                messages.append({
                    "role": "user",
                    "content": message.text.strip(),
                    "sender_name": sender_name
                })
    return list(reversed(messages))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
def debug_messages(messages):
    print("\n=== –û–¢–ü–†–ê–í–ö–ê –í –ù–ï–ô–†–û–°–ï–¢–¨ ===")
    print("\n=== –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ===")
    print(messages[0]["content"])
    print("\n=== –ò–°–¢–û–†–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===")
    
    for i, msg in enumerate(messages[1:], 1):
        role = msg["role"]
        content = msg["content"]
        
        if "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:" in content:
            print("\n--- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---")
            print(content)
            continue
            
        if "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:" in content:
            print("\n--- –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ---")
            print(content)
            continue
            
        if "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:" in content:
            print("\n--- –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---")
            print(content)
            continue
            
        print(f"\n[{i}] {role.upper()}:")
        print(content)
    
    print("\n===========================")
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(messages)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
async def get_gpt_response(query, history, replied_msg=None, original_query=None):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "assistant", "content": "–Ø Jotaro AI, –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —ç–≥–æ–∏—Å—Ç–∏—á–Ω—ã–π –∑—É–º–µ—Ä, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"},
        {"role": "user", "content": "–ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ Jotaro AI"},
        {"role": "assistant", "content": "–ï—Å, —è Jotaro AI –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –¥–µ—Ä–∑–∫–æ –∏ –ø–æ-–∑—É–º–µ—Ä—Å–∫–∏"}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history_text = "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
    for msg in history[-25:]:
        sender = "Jotaro AI" if msg["role"] == "assistant" else msg["sender_name"]
        content = msg["content"]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç
        if replied_msg and original_query and content == original_query:
            history_text += f"[–°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏] {sender}: {content}\n"
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif "–°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç:" in content:
            original = content.split("–°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç:")[1].split("–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")[0].strip()
            response = content.split("–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")[1].strip()
            history_text += f"[–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original}] {sender}: {response}\n"
        else:
            history_text += f"{sender}: {content}\n"
    
    messages.append({"role": "user", "content": history_text})
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ä–æ–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    messages.append({"role": "system", "content": "–ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã Jotaro AI –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –¥–µ—Ä–∑–∫–æ, –∫–∞–∫ –∑—É–º–µ—Ä"})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    messages.append({"role": "user", "content": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}"})
    
    # –î–µ–±–∞–≥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    debug_messages(messages)
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    for model in AVAILABLE_MODELS:
        try:
            logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model}")
            print(f"\n{'='*50}\nü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}\n{'='*50}")
            
            response = gpt_client.chat.completions.create(
                model=model,
                messages=messages
            )
            if response and response.choices and response.choices[0].message.content:
                success_msg = f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {model}"
                logger.info(success_msg)
                print(success_msg)
                return response.choices[0].message.content.strip()
        except Exception as e:
            error_msg = f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {str(e)}"
            logger.warning(error_msg)
            print(error_msg)
            continue
    raise Exception("–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
@client.on(events.NewMessage(pattern=r'^(?!Jotaro AI:)((\./)|(.*?[–î–¥]–∂–æ—Ç–∞—Ä–æ.*?)|(.*?[–ñ–∂]–æ—Ç–∞—Ä–æ.*?))'))
async def handle_gpt_request(event):
    await process_request(event)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
@client.on(events.NewMessage())
async def handle_reply_to_bot(event):
    if not event.is_reply:
        return
    
    replied_msg = await event.get_reply_message()
    if not replied_msg or not replied_msg.text or not replied_msg.text.startswith("Jotaro AI:"):
        return
        
    await process_request(event)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async def process_request(event):
    user = await event.get_sender()
    chat = await event.get_chat()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} –≤ —á–∞—Ç–µ {chat.id}")
    logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {event.message.text}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = await get_chat_history(chat)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    replied_msg = None
    original_query = None
    if event.reply_to:
        replied_msg = await event.get_reply_message()
        if replied_msg and replied_msg.text:
            original_query = replied_msg.text
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {original_query}")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            async for msg in client.iter_messages(chat, min_id=replied_msg.id-5, max_id=replied_msg.id+5):
                if msg.text:
                    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {msg.text}")
    
    if event.message.text.startswith('./'):
        query = event.message.text[2:].strip()
    else:
        query = event.message.text.strip()
    
    if not query:
        await event.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return
    
    try:
        processing_msg = await event.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        start_time = datetime.datetime.now()
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        context_query = query
        if replied_msg and replied_msg.text:
            if replied_msg.text.startswith("Jotaro AI:"):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                bot_response = replied_msg.text[len("Jotaro AI:"):].strip()
                context_query = f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_response}\n–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}"
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞: {bot_response}")
            elif original_query:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context_query = f"–°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç: {original_query}\n–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}"
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        response_text = await get_gpt_response(
            query=context_query, 
            history=chat_history,
            replied_msg=replied_msg,
            original_query=original_query
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        message_history.append({"role": "user", "content": context_query})
        message_history.append({"role": "assistant", "content": response_text})
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        logger.info(f"–†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(message_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        response_time = (datetime.datetime.now() - start_time).total_seconds()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT –∑–∞ {response_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        await processing_msg.delete()
        await event.reply(f"Jotaro AI: {response_text}")
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_msg}")
        
        error_response = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:\n\n"
            f"```{error_msg}```\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )
        
        try:
            if 'processing_msg' in locals():
                await processing_msg.delete()
        except:
            pass
        
        await event.reply(error_response)

if __name__ == '__main__':
    print("‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    logger.info("–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client.start()
    client.run_until_disconnected() 